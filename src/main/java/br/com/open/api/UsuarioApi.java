/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.15).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package br.com.open.api;

import java.util.List;

import javax.validation.Valid;
import javax.validation.constraints.DecimalMax;
import javax.validation.constraints.DecimalMin;
import javax.validation.constraints.Min;
import javax.validation.constraints.NotNull;

import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

import br.com.open.model.Usuario;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;
import io.swagger.annotations.ApiResponse;
import io.swagger.annotations.ApiResponses;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2020-08-24T23:05:39.296Z")

@Api(value = "usuario", description = "the usuario API")
@RequestMapping(value = "/api")
public interface UsuarioApi {

    @ApiOperation(value = "Adicionar novo usuário.", nickname = "adicionarNovoUsuario", notes = "EndPoint para gravar usuário na base de dados.", tags={ "Usuario", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Operação realizada com sucesso."),
        @ApiResponse(code = 405, message = "Entrada inválida."),
        @ApiResponse(code = 500, message = "Erro Interno.") })
    @RequestMapping(value = "/usuario/adicionarUsuario",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> adicionarNovoUsuario(@ApiParam(value = "EndPoint para gravar usuário na base de dados." ,required=true )  @Valid @RequestBody Usuario body);


    @ApiOperation(value = "Alterar senha do usuário.", nickname = "alterarSenha", notes = "", tags={ "Usuario", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Operação realizada com sucesso."),
        @ApiResponse(code = 500, message = "Erro Interno") })
    @RequestMapping(value = "/usuario/alterarSenha/{novaSenha}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> alterarSenha(@DecimalMin("1") @DecimalMax("10") @ApiParam(value = "EndPoint para alterar senha do usuário.",required=true) @PathVariable("novaSenha") String novaSenha);


    @ApiOperation(value = "Bloqueia usuário.", nickname = "bloquearUsuario", notes = "Bloqueia usuário.", tags={ "Usuario", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Operação realizada com sucesso."),
        @ApiResponse(code = 500, message = "Erro Interno") })
    @RequestMapping(value = "/usuario/bloquearUsuario/{idUsuario}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> bloquearUsuario(@Min(1L)@ApiParam(value = "ID do usuário que será bloqueado.",required=true) @PathVariable("idUsuario") Long idUsuario);


    @ApiOperation(value = "Desloga usuário, impossíbilitando que realize operações no sistema.", nickname = "deslogarUsuario", notes = "", tags={ "Usuario", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Operação realizada com sucesso.") })
    @RequestMapping(value = "/usuario/logout",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Void> deslogarUsuario();


    @ApiOperation(value = "Editar Usuario.", nickname = "editarUsuario", notes = "", tags={ "Usuario", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Operação realizada com sucesso."),
        @ApiResponse(code = 400, message = "Id inválido"),
        @ApiResponse(code = 404, message = "Usuário não encontrado."),
        @ApiResponse(code = 405, message = "Entrada inválida.") })
    @RequestMapping(value = "/usuario/editarUsuario",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> editarUsuario(@ApiParam(value = "EndPoint para parte de edição de usuário." ,required=true )  @Valid @RequestBody Usuario body);


    @ApiOperation(value = "Lista perfil do usuário.", nickname = "listarPerfilDeUsuario", notes = "Serviço para listar perfil, com tempo que foi criado, quantidade de chamados fechados, pontuação SLA, e foto.", response = Usuario.class, responseContainer = "List", tags={ "Usuario", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Operação realizada com sucesso.", response = Usuario.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Entrada inválida."),
        @ApiResponse(code = 500, message = "Erro Interno") })
    @RequestMapping(value = "/usuario/listarPerfilDeUsuario",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<Usuario>> listarPerfilDeUsuario(@NotNull @ApiParam(value = "Retorna perfil de usuário", required = true, allowableValues = "available, pending, sold") @Valid @RequestParam(value = "status", required = true) List<String> status);


    @ApiOperation(value = "EndPoint de login de usuário.", nickname = "realizarLogin", notes = "EndPoint de login de usuário.", response = String.class, tags={ "Usuario", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Operação realizada com sucesso.", response = String.class),
        @ApiResponse(code = 400, message = "Usuário ou senha inválidos."),
        @ApiResponse(code = 500, message = "Erro Interno") })
    @RequestMapping(value = "/usuario/login",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<String> realizarLogin(@NotNull @ApiParam(value = "Usuário que irá realizar operações.", required = true) @Valid @RequestParam(value = "usuario", required = true) String usuario,@NotNull @ApiParam(value = "Senha do usuário que irá realizar operações.", required = true) @Valid @RequestParam(value = "senha", required = true) String senha);

}
